col = c('royalblue2','#ff7474ff') ,
pch = c(19,19), bty = "n",  pt.cex = 1.5, cex = 0.8 ,
text.col = "black", horiz = FALSE, inset = c(0.1, 0.1))
# construccion de dendograma WARD
library(dendextend)
mar = c(5.1, 4.1, 4.1, 2.1)
pch=c('royalblue2','#ff7474ff')
cols=alpha(pch[sample_cluster$variedad[order.dendrogram(as.dendrogram(hc_single))]],0.7)
dend_single <- color_branches(as.dendrogram(hc_single), k = 2)
dend_single <- set(dend_single, "labels_cex", 0.1)
grafico1 <- dend_single %>%  set("leaves_pch",19)%>%
set("leaves_cex", .9) %>% set("leaves_col", cols) %>%
plot(main = "Dendrograma jerárquico distancia euclidea. Single", ylab='Distancia',cex.lab=1, cex.axis=.6)+
mtext(side = 1, line = 0.5, at = 1, adj = -4.1, 'Vino')
legend(80,6, title='Variedad',
legend = c("Blanco" , "tinto"),
col = c('royalblue2','#ff7474ff') ,
pch = c(19,19), bty = "n",  pt.cex = 1.5, cex = 0.8 ,
text.col = "black", horiz = FALSE, inset = c(0.1, 0.1))
# Matriz de distancias euclídeas
mat_dist <- dist(x = sample_cluster[1:12], method = "manhattan")
# Dendrogramas (según el tipo de segmentación jerárquica aplicada)
hc_complete <- hclust(d = mat_dist, method = "complete")
hc_average  <- hclust(d = mat_dist, method = "average")
hc_single   <- hclust(d = mat_dist, method = "single")
hc_ward     <- hclust(d = mat_dist, method = "ward.D2")
#calculo del coeficiente de correlacion cofenetico
completo <- round(cor(x = mat_dist, cophenetic(hc_complete)),3)
promedio <- round(cor(x = mat_dist, cophenetic(hc_average)),3)
simple <- round(cor(x = mat_dist, cophenetic(hc_single)),3)
ward <- round(cor(x = mat_dist, cophenetic(hc_ward)),3)
valores_coef <- cbind(completo,promedio,simple,ward)
# Imprimo valores de coeficiente cofenético
kable(valores_coef)
# Armo clusters
jer_ward<-cutree(hc_ward,k=2)
jer_average<-cutree(hc_average,k=2)
jer_complete<-cutree(hc_complete,k=2)
jer_single<-cutree(hc_single,k=2)
# Agrego cluster a dataframe
sample_cluster$jer_ward_m=jer_ward
sample_cluster$jer_average_m=jer_average
sample_cluster$jer_complete_m=jer_complete
sample_cluster$jer_single_m=jer_single
# construccion de dendograma WARD
library(dendextend)
library(scales)
mar = c(5.1, 4.1, 4.1, 2.1)
pch=c('royalblue2','#ff7474ff')
cols=alpha(pch[sample_cluster$variedad[order.dendrogram(as.dendrogram(hc_ward))]],0.5)
dend_ward <- color_branches(as.dendrogram(hc_ward), k = 2)
dend_ward <- set(dend_ward, "labels_cex", 0.1)
grafico1m <- dend_ward %>%  set("leaves_pch",19)%>%
set("leaves_cex", .9) %>% set("leaves_col", cols) %>%
plot(main = "Dendrograma jerárquico distancia Manhattan. Ward", ylab='Distancia',cex.lab=1, cex.axis=.6)+
mtext(side = 1, line = 0.5, at = 1, adj = -4.1, 'Vino')
legend(80,70, title='Variedad',
legend = c("Blanco" , "tinto"),
col = c('royalblue2','#ff7474ff') ,
pch = c(19,19), bty = "n",  pt.cex = 1.5, cex = 0.8 ,
text.col = "black", horiz = FALSE, inset = c(0.1, 0.1))
# construccion de dendograma WARD
library(dendextend)
library(scales)
mar = c(5.1, 4.1, 4.1, 2.1)
pch=c('royalblue2','#ff7474ff')
cols=alpha(pch[sample_cluster$variedad[order.dendrogram(as.dendrogram(hc_average))]],0.5)
dend_av <- color_branches(as.dendrogram(hc_average), k = 2)
dend_av <- set(dend_av, "labels_cex", 0.1)
grafico2m <- dend_av %>%  set("leaves_pch",19)%>%
set("leaves_cex", .9) %>% set("leaves_col", cols) %>%
plot(main = "Dendrograma jerárquico distancia Manhattan. Average", ylab='Distancia',cex.lab=1, cex.axis=.6)+
mtext(side = 1, line = 0.5, at = 1, adj = -4.1, 'Vino')
legend(80,20, title='Variedad',
legend = c("Blanco" , "tinto"),
col = c('royalblue2','#ff7474ff') ,
pch = c(19,19), bty = "n",  pt.cex = 1.5, cex = 0.8 ,
text.col = "black", horiz = FALSE, inset = c(0.1, 0.1))
# construccion de dendograma WARD
library(dendextend)
library(scales)
mar = c(5.1, 4.1, 4.1, 2.1)
pch=c('royalblue2','#ff7474ff')
cols=alpha(pch[sample_cluster$variedad[order.dendrogram(as.dendrogram(hc_complete))]],0.5)
dend_comp <- color_branches(as.dendrogram(hc_complete), k = 2)
dend_comp <- set(dend_comp, "labels_cex", 0.1)
grafico3m <- dend_comp %>%  set("leaves_pch",19)%>%
set("leaves_cex", .9) %>% set("leaves_col", cols) %>%
plot(main = "Dendrograma jerárquico distancia Manhattan. Complete", ylab='Distancia',cex.lab=1, cex.axis=.6)+
mtext(side = 1, line = 0.5, at = 1, adj = -4.1, 'Vino')
legend(80,30, title='Variedad',
legend = c("Blanco" , "tinto"),
col = c('royalblue2','#ff7474ff') ,
pch = c(19,19), bty = "n",  pt.cex = 1.5, cex = 0.8 ,
text.col = "black", horiz = FALSE, inset = c(0.1, 0.1))
View(muestraVinos)
View(data_c_diag)
View(data_c_diag)
CL  = kmeans(scale(muestraVinos[,1:12]),cantidad_clusters)
data$kmeans = CL$cluster
muestraVinos$kmeans = CL$cluster
View(muestraVinos)
View(muestraVinos)
muestraVinos$variedadN<-ifelse(muestraVinos$variable=="Blanco",1,2)
col1 <- col1[muestraVinos$variedadN]
# -------------------------------------------------------------------------------------------
col1 <- c('royalblue2','#ff7474ff')
muestraVinos$variedadN<-ifelse(muestraVinos$variable=="Blanco",1,2)
col1 <- col1[muestraVinos$variedadN]
legend("topright", bty = "n", cex = .9, title = "Variedad", c("Tinto", "Blanco"), fill = c('royalblue2','#ff7474ff'))
scatterplot3d(muestraVinos$total.sulfur.dioxide,muestraVinos$density,muestraVinos$citric.acid, color = alpha(col1,0.3), box=F,angle=45, pch = 19, grid = TRUE, tick.marks = FALSE, xlab = "total.sulfur.dioxide", ylab = "density", zlab = "citric.acid", main='Realidad')
install.packages("scatterplot3d")
library(scatterplot3d)
library(scatterplot3d)
cantidad_clusters=2
CL  = kmeans(scale(muestraVinos[,1:12]),cantidad_clusters)
muestraVinos$kmeans = CL$cluster
# Grafico scatterplot original + cluster con k=2
par(mfrow=c(1,2))
# -------------------------------------------------------------------------------------------
col1 <- c('royalblue2','#ff7474ff')
muestraVinos$variedadN<-ifelse(muestraVinos$variable=="Blanco",1,2)
col1 <- col1[muestraVinos$variedadN]
scatterplot3d(muestraVinos$total.sulfur.dioxide,muestraVinos$density,muestraVinos$citric.acid, color = alpha(col1,0.3), box=F,angle=45, pch = 19, grid = TRUE, tick.marks = FALSE, xlab = "total.sulfur.dioxide", ylab = "density", zlab = "citric.acid", main='Realidad')
legend("topright", bty = "n", cex = .9, title = "Variedad", c("Blanco", "Tinto"), fill = c('royalblue2','#ff7474ff'))
library(scatterplot3d)
cantidad_clusters=2
CL  = kmeans(scale(muestraVinos[,1:12]),cantidad_clusters)
muestraVinos$kmeans = CL$cluster
# Grafico scatterplot original + cluster con k=2
par(mfrow=c(1,2))
# -------------------------------------------------------------------------------------------
col1 <- c('royalblue2','#ff7474ff')
muestraVinos$variedadN<-ifelse(muestraVinos$variable=="Blanco",1,2)
col1 <- col1[muestraVinos$variedadN]
scatterplot3d(muestraVinos$total.sulfur.dioxide,muestraVinos$density,muestraVinos$citric.acid, color = alpha(col1,0.3), box=F,angle=45, pch = 19, grid = TRUE, tick.marks = FALSE, xlab = "total.sulfur.dioxide", ylab = "density", zlab = "citric.acid", main='Realidad')
legend("topright", bty = "n", cex = .9, title = "Variedad", c("Blanco", "Tinto"), fill = c('royalblue2','#ff7474ff'))
#graf 2
colors <- c('orange','#a25da2a5')
colors <- colors[muestraVinos$variedadN]
scatterplot3d(muestraVinos$total.sulfur.dioxide,muestraVinos$density,muestraVinos$citric.acid, color = alpha(colors,0.3), box=F,angle=45, pch = 19, grid = TRUE, tick.marks = FALSE, xlab = "total.sulfur.dioxide", ylab = "density", zlab = "citric.acid", main='Clustering')
legend("topright", bty = "n", cex = .9, title = "Grupo k-means", c("1", "2"), fill = c('orange','#a25da2a5'))
table(muestraVinos$variable, muestraVinos$kmeans)
table(muestraVinos$variable, muestraVinos$kmeans)%>%
kbl(format = "html", caption = "Muestra estratificada",
format.args = list(decimal.mark = ",", big.mark = ".")) %>%
kable_paper("hover",
full_width = T) %>%
row_spec(0, bold = T, color = "black", background = "#33B8AD")
kmeans1 <- muestraVinos %>% filter(kmeans==1)  %>%select(total.sulfur.dioxide, density, citric.acid)%>% colMeans()
View(muestraVinos)
kmeans2 <- muestraVinos %>% filter(kmeans==2)  %>%select(total.sulfur.dioxide, density, citric.acid)%>% colMeans()
Tinto <- muestraVinos %>%filter(variable=='Tinto') %>%select(total.sulfur.dioxide, density, citric.acid)%>% colMeans()
Blanco <- muestraVinos %>%filter(variable=='Blanco') %>%select(total.sulfur.dioxide, density, citric.acid)%>% colMeans()
# Imprimo resultados
kable(rbind(kmeans1,Blanco,kmeans2,Tinto))
kmeans1 <- muestraVinos %>% filter(kmeans==1)  %>% select(total.sulfur.dioxide, density, citric.acid)%>% colMeans()
kmeans1 <- muestraVinos %>% filter(kmeans==1)  %>% dplyr::select(total.sulfur.dioxide, density, citric.acid)%>% colMeans()
kmeans1 <- muestraVinos %>% filter(kmeans==1)  %>% dplyr::select(total.sulfur.dioxide, density, citric.acid)%>% colMeans()
kmeans2 <- muestraVinos %>% filter(kmeans==2)  %>%dplyr::select(total.sulfur.dioxide, density, citric.acid)%>% colMeans()
Tinto <- muestraVinos %>%filter(variable=='Tinto') %>%dplyr::select(total.sulfur.dioxide, density, citric.acid)%>% colMeans()
Blanco <- muestraVinos %>%filter(variable=='Blanco') %>%dplyr::select(total.sulfur.dioxide, density, citric.acid)%>% colMeans()
# Imprimo resultados
kable(rbind(kmeans1,Blanco,kmeans2,Tinto))
kmeans1 <- muestraVinos %>% filter(kmeans==1)  %>% dplyr::select(total.sulfur.dioxide, density, citric.acid)%>% colMeans()
kmeans2 <- muestraVinos %>% filter(kmeans==2)  %>%dplyr::select(total.sulfur.dioxide, density, citric.acid)%>% colMeans()
Tinto <- muestraVinos %>%filter(variable=='Tinto') %>%dplyr::select(total.sulfur.dioxide, density, citric.acid)%>% colMeans()
Blanco <- muestraVinos %>%filter(variable=='Blanco') %>%dplyr::select(total.sulfur.dioxide, density, citric.acid)%>% colMeans()
# Imprimo resultados
kable(rbind(kmeans1,Tinto,kmeans2,Blanco))
kmeans1 <- muestraVinos %>% filter(kmeans==1)  %>% dplyr::select(total.sulfur.dioxide, density, citric.acid)%>% colMeans()
kmeans2 <- muestraVinos %>% filter(kmeans==2)  %>%dplyr::select(total.sulfur.dioxide, density, citric.acid)%>% colMeans()
Tinto <- muestraVinos %>%filter(variable=='Tinto') %>%dplyr::select(total.sulfur.dioxide, density, citric.acid)%>% colMeans()
Blanco <- muestraVinos %>%filter(variable=='Blanco') %>%dplyr::select(total.sulfur.dioxide, density, citric.acid)%>% colMeans()
# Imprimo resultados
kable(rbind(kmeans1,Tinto,kmeans2,Blanco))%>%
kbl(format = "html", caption = "Comparación de medias K-means",
format.args = list(decimal.mark = ",", big.mark = ".")) %>%
kable_paper("hover",
full_width = T) %>%
row_spec(0, bold = T, color = "black", background = "#33B8AD")
# Imprimo resultados
as.data.frame(rbind(kmeans1,Tinto,kmeans2,Blanco))%>%
kbl(format = "html", caption = "Comparación de medias K-means",
format.args = list(decimal.mark = ",", big.mark = ".")) %>%
kable_paper("hover",
full_width = T) %>%
row_spec(0, bold = T, color = "black", background = "#33B8AD")
29/2000
library(scatterplot3d)
cantidad_clusters=2
CL  = kmeans(scale(muestraVinos[,1:12]),cantidad_clusters)
muestraVinos$kmeans = CL$cluster
# Grafico scatterplot original + cluster con k=2
par(mfrow=c(1,2))
# -------------------------------------------------------------------------------------------
col1 <- c('royalblue2','#ff7474ff')
muestraVinos$variedadN<-ifelse(muestraVinos$variable=="Blanco",2,1)
col1 <- col1[muestraVinos$variedadN]
scatterplot3d(muestraVinos$total.sulfur.dioxide,muestraVinos$density,muestraVinos$citric.acid, color = alpha(col1,0.3), box=F,angle=45, pch = 19, grid = TRUE, tick.marks = FALSE, xlab = "total.sulfur.dioxide", ylab = "density", zlab = "citric.acid", main='Realidad')
legend("topright", bty = "n", cex = .9, title = "Variedad", c("Tinto","Blanco"), fill = c('#ff7474ff','royalblue2'))
#graf 2
colors <- c('orange','#a25da2a5')
colors <- colors[muestraVinos$variedadN]
scatterplot3d(muestraVinos$total.sulfur.dioxide,muestraVinos$density,muestraVinos$citric.acid, color = alpha(colors,0.3), box=F,angle=45, pch = 19, grid = TRUE, tick.marks = FALSE, xlab = "total.sulfur.dioxide", ylab = "density", zlab = "citric.acid", main='Clustering')
legend("topright", bty = "n", cex = .9, title = "Grupo k-means", c("1", "2"), fill = c('orange','#a25da2a5'))
library(scatterplot3d)
cantidad_clusters=2
CL  = kmeans(scale(muestraVinos[,1:12]),cantidad_clusters)
muestraVinos$kmeans = CL$cluster
# Grafico scatterplot original + cluster con k=2
par(mfrow=c(1,2))
# -------------------------------------------------------------------------------------------
col1 <- c('royalblue2','#ff7474ff')
muestraVinos$variedadN<-ifelse(muestraVinos$variable=="Blanco",2,1)
col1 <- col1[muestraVinos$variedadN]
scatterplot3d(muestraVinos$total.sulfur.dioxide,muestraVinos$density,muestraVinos$citric.acid, color = alpha(col1,0.3), box=F,angle=45, pch = 19, grid = TRUE, tick.marks = FALSE, xlab = "total.sulfur.dioxide", ylab = "density", zlab = "citric.acid", main='Realidad')
legend("topright", bty = "n", cex = .9, title = "Variedad", c("Tinto","Blanco"), fill = c('royalblue2',"#ff7474ff'))
#graf 2
colors <- c('orange','#a25da2a5')
colors <- colors[muestraVinos$variedadN]
scatterplot3d(muestraVinos$total.sulfur.dioxide,muestraVinos$density,muestraVinos$citric.acid, color = alpha(colors,0.3), box=F,angle=45, pch = 19, grid = TRUE, tick.marks = FALSE, xlab = "total.sulfur.dioxide", ylab = "density", zlab = "citric.acid", main='Clustering')
library(scatterplot3d)
cantidad_clusters=2
CL  = kmeans(scale(muestraVinos[,1:12]),cantidad_clusters)
muestraVinos$kmeans = CL$cluster
# Grafico scatterplot original + cluster con k=2
par(mfrow=c(1,2))
# -------------------------------------------------------------------------------------------
col1 <- c('royalblue2','#ff7474ff')
muestraVinos$variedadN<-ifelse(muestraVinos$variable=="Blanco",2,1)
col1 <- col1[muestraVinos$variedadN]
scatterplot3d(muestraVinos$total.sulfur.dioxide,muestraVinos$density,muestraVinos$citric.acid, color = alpha(col1,0.3), box=F,angle=45, pch = 19, grid = TRUE, tick.marks = FALSE, xlab = "total.sulfur.dioxide", ylab = "density", zlab = "citric.acid", main='Realidad')
legend("topright", bty = "n", cex = .9, title = "Variedad", c("Tinto","Blanco"), fill = c('royalblue2',"#ff7474ff"))
#graf 2
colors <- c('orange','#a25da2a5')
colors <- colors[muestraVinos$variedadN]
scatterplot3d(muestraVinos$total.sulfur.dioxide,muestraVinos$density,muestraVinos$citric.acid, color = alpha(colors,0.3), box=F,angle=45, pch = 19, grid = TRUE, tick.marks = FALSE, xlab = "total.sulfur.dioxide", ylab = "density", zlab = "citric.acid", main='Clustering')
legend("topright", bty = "n", cex = .9, title = "Grupo k-means", c("1", "2"), fill = c('orange','#a25da2a5'))
library(scatterplot3d)
cantidad_clusters=2
CL  = kmeans(scale(muestraVinos[,1:12]),cantidad_clusters)
muestraVinos$kmeans = CL$cluster
# Grafico scatterplot original + cluster con k=2
par(mfrow=c(1,2))
# -------------------------------------------------------------------------------------------
col1 <- c('royalblue2','#ff7474ff')
muestraVinos$variedadN<-ifelse(muestraVinos$variable=="Blanco",2,1)
col1 <- col1[muestraVinos$variedadN]
scatterplot3d(muestraVinos$total.sulfur.dioxide,muestraVinos$density,muestraVinos$citric.acid, color = alpha(col1,0.3), box=F,angle=45, pch = 19, grid = TRUE, tick.marks = FALSE, xlab = "total.sulfur.dioxide", ylab = "density", zlab = "citric.acid", main='Realidad')
legend("topright", bty = "n", cex = .9, title = "Variedad", c("Tinto","Blanco"), fill = c("#ff7474ff",'royalblue2'))
#graf 2
colors <- c('orange','#a25da2a5')
colors <- colors[muestraVinos$variedadN]
scatterplot3d(muestraVinos$total.sulfur.dioxide,muestraVinos$density,muestraVinos$citric.acid, color = alpha(colors,0.3), box=F,angle=45, pch = 19, grid = TRUE, tick.marks = FALSE, xlab = "total.sulfur.dioxide", ylab = "density", zlab = "citric.acid", main='Clustering')
legend("topright", bty = "n", cex = .9, title = "Grupo k-means", c("1", "2"), fill = c('orange','#a25da2a5'))
library(scatterplot3d)
cantidad_clusters=2
CL  = kmeans(scale(muestraVinos[,1:12]),cantidad_clusters)
muestraVinos$kmeans = CL$cluster
# Grafico scatterplot original + cluster con k=2
par(mfrow=c(1,2))
# -------------------------------------------------------------------------------------------
col1 <- c('#ff7474ff','royalblue2')
muestraVinos$variedadN<-ifelse(muestraVinos$variable=="Blanco",2,1)
col1 <- col1[muestraVinos$variedadN]
scatterplot3d(muestraVinos$total.sulfur.dioxide,muestraVinos$density,muestraVinos$citric.acid, color = alpha(col1,0.3), box=F,angle=45, pch = 19, grid = TRUE, tick.marks = FALSE, xlab = "total.sulfur.dioxide", ylab = "density", zlab = "citric.acid", main='Realidad')
legend("topright", bty = "n", cex = .9, title = "Variedad", c("Tinto","Blanco"), fill = c("#ff7474ff",'royalblue2'))
#graf 2
colors <- c('orange','#a25da2a5')
colors <- colors[muestraVinos$variedadN]
scatterplot3d(muestraVinos$total.sulfur.dioxide,muestraVinos$density,muestraVinos$citric.acid, color = alpha(colors,0.3), box=F,angle=45, pch = 19, grid = TRUE, tick.marks = FALSE, xlab = "total.sulfur.dioxide", ylab = "density", zlab = "citric.acid", main='Clustering')
legend("topright", bty = "n", cex = .9, title = "Grupo k-means", c("1", "2"), fill = c('orange','#a25da2a5'))
require("data.table")
require("rpart")
require("ggplot2")
# Poner la carpeta de la materia de SU computadora local
setwd("C:/Users/lnfernandez/Desktop/posgrado/DM EyN/DM-EyF")  #Establezco el Working Directory
remove(list=ls())
#cargo el dataset
dataset  <- fread("./datasets/competencia1_2022.csv")
# Librerías necesarias
require("data.table")
require("rpart")
require("ROCR")
require("ggplot2")
require(caret)
# Poner la carpeta de la materia de SU computadora local
setwd("C:/Users/lnfernandez/Desktop/posgrado/DM EyN/DM-EyF")  #Establezco el Working Directory
#cargo el dataset
dataset  <- fread("./datasets/competencia1_2022.csv")
# Poner sus semillas
semillas <- c(100621,
102149,
202061,
257093,
584723)
# Nos quedamos solo con el 202101
dataset <- dataset[foto_mes == 202101]
# Creamos una clase binaria
dataset[, clase_binaria := ifelse(
clase_ternaria == "BAJA+2",
"evento",
"noevento"
)]
# Borramos el target viejo
dataset[, clase_ternaria := NULL]
# Seteamos nuestra primera semilla
set.seed(semillas[1])
# Particionamos de forma estratificada
in_training <- caret::createDataPartition(dataset$clase_binaria,
p = 0.70, list = FALSE)
dtrain  <-  dataset[in_training, ]
dtest   <-  dataset[-in_training, ]
# Medimos cuanto tarda nuestro modelo en ajustar
start_time <- Sys.time()
modelo <- rpart(clase_binaria ~ .,
data = dtrain,
xval = 0,
cp = 0,
minsplit = 20,
minbucket = 1,
maxdepth = 5)
print(Sys.time() - start_time)
pred_training <- predict(modelo, dtrain, type = "prob")
pred_testing <- predict(modelo, dtest, type = "prob")
# Armamos una función que nos calcule la ganancia, usando el punto de corte de
# 0.025
ganancia <- function(probabilidades, clase) {
return(sum(
(probabilidades >= 0.025) * ifelse(clase == "evento", 78000, -2000))
)
}
# La ganancia en testing NORMALIZADA
print(ganancia(pred_testing[, "evento"], dtest$clase_binaria) / 0.3)
# Almacenaremos los resultados en una tabla
resultados_n_gan <- c()
# Calcule en función del tiempo de ejecución anterior, cuantos árboles puede
# hacer en 5 minutos y ponga ese número en la siguiente variable
n <- 100
set.seed(semillas[1])
t0 <- Sys.time()
resultados_grid_search <- data.table()
c(4:15)
resultados_grid_search <- data.table()
for (cp in c(-1, 0.1,0.01,0.001)) {# 0.1 para abajo
for (md in c(4:15)) {# 4 a 15
for (ms in c(1:50)) {
for (mb in c(1, as.integer(ms / 2),as.integer(ms / 3),as.integer(ms / 3))) {# otros divisores
t0 <- Sys.time()
gan_semillas <- c()
for (s in semillas) {
set.seed(s)
in_training <- caret::createDataPartition(dataset[,
get("clase_binaria")],
p = 0.70, list = FALSE)
dtrain  <-  dataset[in_training, ]
dtest   <-  dataset[-in_training, ]
modelo <- rpart(clase_binaria ~ .,
data = dtrain,
xval = 0,
cp = cp,
minsplit = ms,
minbucket = mb,
maxdepth = md)
pred_testing <- predict(modelo, dtest, type = "prob")
gan <- ganancia(pred_testing[, "evento"], dtest$clase_binaria) / 0.3
gan_semillas <- c(gan_semillas, gan)
}
tiempo <-  as.numeric(Sys.time() - t0, units = "secs")
resultados_grid_search <- rbindlist(list(
resultados_grid_search,
data.table(
tiempo = tiempo,
cp = cp,
mb = mb,
ms = ms,
md = md,
gan = mean(gan_semillas))
))
write.csv(resultados_grid_search,"resultados.csv", row.names = FALSE)
}
}
}
}
for (cp in c(-1, 0.1,0.01,0.001)) {# 0.1 para abajo
for (md in c(4:15)) {# 4 a 15
for (ms in c(1:50)) {
for (mb in c(1, as.integer(ms / 2),as.integer(ms / 3),as.integer(ms / 3))) {# otros divisores
t0 <- Sys.time()
gan_semillas <- c()
for (s in semillas) {
set.seed(s)
in_training <- caret::createDataPartition(dataset[,
get("clase_binaria")],
p = 0.70, list = FALSE)
dtrain  <-  dataset[in_training, ]
dtest   <-  dataset[-in_training, ]
modelo <- rpart(clase_binaria ~ .,
data = dtrain,
xval = 0,
cp = cp,
minsplit = ms,
minbucket = mb,
maxdepth = md)
pred_testing <- predict(modelo, dtest, type = "prob")
gan <- ganancia(pred_testing[, "evento"], dtest$clase_binaria) / 0.3
gan_semillas <- c(gan_semillas, gan)
}
tiempo <-  as.numeric(Sys.time() - t0, units = "secs")
resultados_grid_search <- rbindlist(list(
resultados_grid_search,
data.table(
tiempo = tiempo,
cp = cp,
mb = mb,
ms = ms,
md = md,
gan = mean(gan_semillas))
))
write.csv(resultados_grid_search,"resultados.csv", row.names = FALSE)
print(resultados_grid_search)
}
}
}
}
resultados_grid_search <- data.table()
for (cp in c(-1, 0.1,0.01,0.001)) {# 0.1 para abajo
for (md in c(4:15)) {# 4 a 15
for (ms in c(1:50)) {
for (mb in c(1, as.integer(ms / 2),as.integer(ms / 3),as.integer(ms / 3))) {# otros divisores
t0 <- Sys.time()
gan_semillas <- c()
for (s in semillas) {
set.seed(s)
in_training <- caret::createDataPartition(dataset[,
get("clase_binaria")],
p = 0.70, list = FALSE)
dtrain  <-  dataset[in_training, ]
dtest   <-  dataset[-in_training, ]
modelo <- rpart(clase_binaria ~ .,
data = dtrain,
xval = 0,
cp = cp,
minsplit = ms,
minbucket = mb,
maxdepth = md)
pred_testing <- predict(modelo, dtest, type = "prob")
gan <- ganancia(pred_testing[, "evento"], dtest$clase_binaria) / 0.3
gan_semillas <- c(gan_semillas, gan)
}
tiempo <-  as.numeric(Sys.time() - t0, units = "secs")
resultados_grid_search <- rbindlist(list(
resultados_grid_search,
data.table(
tiempo = tiempo,
cp = cp,
mb = mb,
ms = ms,
md = md,
gan = mean(gan_semillas))
))
write.csv(resultados_grid_search,"resultados.csv", row.names = FALSE)
print(resultados_grid_search)
}
}
}
}
resultados_grid_search <- data.table()
for (cp in c(-1, 0.1,0.01,0.001)) {# 0.1 para abajo
for (md in c(4:15)) {# 4 a 15
for (ms in c(1:50)) {
for (mb in c(1, as.integer(ms / 2),as.integer(ms / 3),as.integer(ms / 4))) {# otros divisores
t0 <- Sys.time()
gan_semillas <- c()
for (s in semillas) {
set.seed(s)
in_training <- caret::createDataPartition(dataset[,
get("clase_binaria")],
p = 0.70, list = FALSE)
dtrain  <-  dataset[in_training, ]
dtest   <-  dataset[-in_training, ]
modelo <- rpart(clase_binaria ~ .,
data = dtrain,
xval = 0,
cp = cp,
minsplit = ms,
minbucket = mb,
maxdepth = md)
pred_testing <- predict(modelo, dtest, type = "prob")
gan <- ganancia(pred_testing[, "evento"], dtest$clase_binaria) / 0.3
gan_semillas <- c(gan_semillas, gan)
}
tiempo <-  as.numeric(Sys.time() - t0, units = "secs")
resultados_grid_search <- rbindlist(list(
resultados_grid_search,
data.table(
tiempo = tiempo,
cp = cp,
mb = mb,
ms = ms,
md = md,
gan = mean(gan_semillas))
))
write.csv(resultados_grid_search,"resultados.csv", row.names = FALSE)
print(resultados_grid_search)
}
}
}
}
# Visualizo los parámetros de los mejores parámetros
View(resultados_grid_search[gan == max(gan), ])
